from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from app.database.requests import set_user, get_user_by_tg_id
from utils.states import Registration, AdminPassword, NewFio


router = Router()


# –ö–æ–º–∞–Ω–¥–∞ ./start 
@router.message(CommandStart())
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç-–±–æ—Ç –ö–†–û–ù–´\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                         reply_markup=kb.registr)
    

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
@router.callback_query(F.data == 'registr')
async def start_registration(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –§–ò–û –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
@router.message(Registration.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –§–ò–û"""
    try:
        user = await set_user(
            tg_id=message.from_user.id,
            name=message.text
        )
        await state.clear()
        await message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {user.name}!",
            reply_markup=kb.menu)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")



# –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@router.callback_query(F.data == 'back_menu')
async def back_menu(callback: CallbackQuery):
    await callback.message.edit_text("–í–µ—Ä–Ω—É–ª –≤–∞—Å –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:)",
                                     reply_markup=kb.menu)
    

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@router.callback_query(F.data == 'employy')
async def worker_panel(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ",
                                     reply_markup=kb.personal_panel)
    

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å 
@router.callback_query(F.data == 'admin_cms')
async def adminlog(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminPassword.password)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
@router.message(AdminPassword.password)
async def check_admin_password(message: Message, state: FSMContext):
    ADMIN_PASSWORD = "12345"  # –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    if message.text == ADMIN_PASSWORD:
        await message.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            reply_markup=kb.admin_cms
        )
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@router.callback_query(F.data == 'my_info')
async def myinfo(callback: CallbackQuery):
    user = await get_user_by_tg_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return

    text = (
        "üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n"
        f"‚Ä¢ ID: {user.tg_id}\n"
        f"‚Ä¢ –§–ò–û: {user.name}\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"
    )
    
    await callback.message.edit_text(text, reply_markup=kb.my_info)


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@router.callback_query(F.data == 'workers_data')
async def AboutWorkers(callback: CallbackQuery):
    pass


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
@router.callback_query(F.data == "update_info")
async def UpdateInfo(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –§–ò–û –∏/–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                                     reply_markup=kb.re_data)
    

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–æ
@router.callback_query(F.data == "change_fio")
async def change_fio(callback: CallbackQuery, state: FSMContext):
    user = await get_user_by_tg_id(callback.from_user.id)

    await state.set_state(NewFio.name)
    await callback.message.edit_text(
        f"‚úèÔ∏è {user.name}, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –§–ò–û:",
        reply_markup=kb.back_to_menu
    )


# –§–∏–∫—Å–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –§–ò–û
@router.message(NewFio.name)
async def process_new_fio(message: Message, state: FSMContext):
    try:
        user = await set_user(
            tg_id=message.from_user.id,
            name=message.text
        )
        await state.clear()
        await message.answer(
            f"‚úÖ –í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—ë –§–ò–û, —Ç–µ–ø–µ—Ä—å –≤—ã: {user.name}",
            reply_markup=kb.menu
        )
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –§–ò–û: {e}")

